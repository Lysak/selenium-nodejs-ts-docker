import { Builder, until, WebDriver, By } from 'selenium-webdriver';
import chrome from 'selenium-webdriver/chrome';
import fs from 'fs/promises';

async function saveCookies(driver: WebDriver) {
    const cookies = await driver.manage().getCookies();
    await fs.writeFile('cookies.json', JSON.stringify(cookies, null, 2));
    console.log('Cookies saved to cookies.json');
}

// async function loadCookies(driver: WebDriver, url: string) {
//     const cookiesData = await fs.readFile('cookies.json', 'utf-8');
//     const cookies = JSON.parse(cookiesData);
//
//     console.log('Navigating to URL for cookie loading...');
//     await driver.get(url);
//
//     for (const cookie of cookies) {
//         await driver.manage().addCookie(cookie);
//     }
//     console.log('Cookies loaded from cookies.json');
//
//     await driver.navigate().refresh();
// }

(async function runTest() {
    const entirePageUrl = 'https://www.binance.com/en/alpha/bsc/0xc71b5f631354be6853efe9c3ab6b9590f8302e81';
    let driver: WebDriver | undefined;
    const cookiesFilePath = 'cookies.json';

    try {
        const options = new chrome.Options();
        options.addArguments('--no-sandbox');
        options.addArguments('--disable-dev-shm-usage');
        options.addArguments('--disable-gpu');
        options.addArguments('--window-size=1920,1080');
        options.addArguments('--start-maximized');
        options.addArguments('--allow-running-insecure-content');
        options.addArguments('--ignore-certificate-errors');
        // Note: No `--headless`, so the browser will be visible

        driver = await new Builder()
            .forBrowser('chrome')
            .setChromeOptions(options)
            .build();  // Build without specifying a remote server to use local Chrome

        const cookiesExist = await fs.access(cookiesFilePath).then(() => true).catch(() => false);

        if (cookiesExist) {
            // await loadCookies(driver, entirePageUrl);
        } else {
            console.log('Perform login actions...');
            await driver.get('https://www.binance.com/login');  // replace it with your actual login URL

            // Adjust the following according to actual login page elements
            // Example: await driver.findElement(By.css('#loginInput')).sendKeys('your-email');
            // Example: await driver.findElement(By.css('#passwordInput')).sendKeys('your-password');
            // Example: await driver.findElement(By.css('#submitButton')).click();

            console.log('Waiting for login to complete...');
            await driver.wait(until.elementLocated(By.css('.some-logged-in-element')), 15000);

            await saveCookies(driver);
        }

        console.log('Navigating to Binance page...');
        await driver.wait(until.elementLocated(By.css('.bn-slider-track')), 15000);

        console.log('Looking for interactive elements...');
        const buttons = await driver.findElements(By.css('button'));
        for (const button of buttons) {
            const text = await button.getText();
            console.log('Found button with text:', text);
        }

        console.log('Trying to find and click a button...');
        const buttonElement = await driver.findElement(By.css('button'));
        await driver.wait(until.elementIsVisible(buttonElement), 5000);
        await buttonElement.click();
        console.log('Successfully clicked the button');

        await driver.sleep(3000);

        const title = await driver.getTitle();
        console.log(`Page title is: ${title}`);

        const screenshot = await driver.takeScreenshot();
        console.log('Screenshot taken');

        console.log('Keeping browser open for 10 seconds...');
        await driver.sleep(10000*1000);

    } catch (error) {
        console.error('An error occurred:', error);
    } finally {
        if (driver) {
            await driver.quit();
        }
    }
})();
